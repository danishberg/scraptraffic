# handlers.py
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –≤ –µ–¥–∏–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
# –ë–µ–∑ –∞—É–¥–∏–æ, —Å –≤—ã–±–æ—Ä–æ–º (–í—Å–µ –∑–∞—è–≤–∫–∏ / –ü–æ —Ñ–∏–ª—å—Ç—Ä—É),
# –∏ "–°–±—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ (Logout)" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
import logging
import json
import aiohttp
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from config import BEARER_TOKEN

# Import all DB-related functions from db.py
from db import (
    init_db,
    add_user,
    get_user_by_telegram_id,
    delete_user_by_telegram_id,
    add_request,
    init_notification_items_for_user,
    get_notification_items,
    toggle_notification_item_by_id,
    get_users_for_notification,
    get_telegram_id_by_user_id,
    get_all_requests
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MAIN_MENU, REQUEST_INPUT, SEARCH_INPUT = range(3)

# ---------------------------------------------------------------------------
# –ü–û–ú–û–ì–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò
# ---------------------------------------------------------------------------
def build_main_menu():
    keyboard = [
        [InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Pro‚Äë–∞–∫–∫–∞—É–Ω—Ç", callback_data="menu_pro")],
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="menu_notifications")],
        [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="menu_create_request")],
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="menu_logout")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_request_summary(user_data):
    req = user_data.get("request", {})
    text = (
        "<b>üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n"
        f"–¢–∏–ø: {req.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {req.get('material', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {req.get('quantity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ì–æ—Ä–æ–¥: {req.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {req.get('info', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    )
    return text

def build_request_keyboard(user_data):
    req = user_data.get("request", {})
    type_btn = "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏" if req.get("type", "–Ω–µ —É–∫–∞–∑–∞–Ω") != "–Ω–µ —É–∫–∞–∑–∞–Ω" else "–£–∫–∞–∑–∞—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏"
    mat_btn = "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª" if req.get("material", "–Ω–µ —É–∫–∞–∑–∞–Ω") != "–Ω–µ —É–∫–∞–∑–∞–Ω" else "–£–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
    qty_btn = "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" if req.get("quantity", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ") != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" else "–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    city_btn = "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥" if req.get("city", "–Ω–µ —É–∫–∞–∑–∞–Ω") != "–Ω–µ —É–∫–∞–∑–∞–Ω" else "–£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥"
    info_btn = "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" if req.get("info", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞") != "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" else "–£–∫–∞–∑–∞—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"

    keyboard = [
        [InlineKeyboardButton(f"üîÑ {type_btn}", callback_data="req_type")],
        [InlineKeyboardButton(f"üîÑ {mat_btn}", callback_data="req_material")],
        [InlineKeyboardButton(f"üîÑ {qty_btn}", callback_data="req_quantity")],
        [InlineKeyboardButton(f"üîÑ {city_btn}", callback_data="req_city")],
        [InlineKeyboardButton(f"üîÑ {info_btn}", callback_data="req_info")],
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="req_confirm")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="req_back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_notifications_menu():
    keyboard = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="notif_materials")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="notif_cities")],
        [InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏", callback_data="notif_view_requests")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notif_back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_notification_list_keyboard(user_id, filter_type, page=1):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 15 —à—Ç—É–∫ –∑–∞ —Ä–∞–∑. (id, value, is_enabled).
    Instead of storing the entire JSON with Cyrillic in callback_data,
    we store a short code: "tn|<filter_id>|<page>".
    """
    items = get_notification_items(user_id, filter_type)  # => [(id, value, is_enabled), ...]
    items_per_page = 15
    start = (page - 1) * items_per_page
    end = start + items_per_page
    subitems = items[start:end]

    keyboard = []
    for (filter_id, val, is_en) in subitems:
        icon = "‚úÖ" if is_en == 1 else "‚ùå"
        data = f"tn|{filter_id}|{page}"
        button_text = f"{icon} {val}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=data)])

    nav_btns = []
    if page > 1:
        nav_btns.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"ln|{filter_type}|{page-1}"))
    if end < len(items):
        nav_btns.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"ln|{filter_type}|{page+1}"))
    if nav_btns:
        keyboard.append(nav_btns)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notif_back")])
    return InlineKeyboardMarkup(keyboard)

async def fetch_orders():
    orders_url = "https://scraptraffic.com/team/api/telegram_bot_external/orders"
    headers = {"Authorization": f"Bearer {BEARER_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(orders_url, headers=headers) as resp:
            data = await resp.json()
            return data

async def post_new_order(order_data: dict) -> dict:
    # Emulate new order via GET request (since POST returns 405)
    url = "https://scraptraffic.com/team/api/telegram_bot_external/emulate_new_order"
    headers = {"Authorization": f"Bearer {BEARER_TOKEN}"}
    logger.info(f"Posting new order with data: {order_data}")
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=order_data) as resp:
            try:
                data = await resp.json()
                logger.info(f"New order posted successfully: {data}")
            except Exception as e:
                text = await resp.text()
                logger.error(f"Error decoding JSON: {e}. Response text: {text}")
                data = {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"}
            return data

async def build_requests_page_text(search, page, page_size=10):
    orders = await fetch_orders()
    transformed = []
    for order in orders:
        transformed.append((
            order.get("order_id"),
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            order.get("text_material", ""),
            order.get("text_volume", ""),
            order.get("text_city", ""),
            order.get("comment", ""),
            order.get("date", "")
        ))
    if search:
        search_lower = search.lower()
        filtered = [r for r in transformed if (search_lower in str(r[0]).lower() or
                                                search_lower in str(r[1]).lower() or
                                                search_lower in (r[2] or "").lower() or
                                                search_lower in (r[3] or "").lower() or
                                                search_lower in (r[4] or "").lower() or
                                                search_lower in (r[5] or "").lower() or
                                                search_lower in (r[6] or "").lower())]
    else:
        filtered = transformed
    total = len(filtered)
    start = (page - 1) * page_size
    end = start + page_size
    page_reqs = filtered[start:end]
    text = "<b>–í—Å–µ –∑–∞—è–≤–∫–∏:</b>\n\n" + format_requests_list(page_reqs)
    has_prev = page > 1
    has_next = end < total
    return text, has_prev, has_next

def build_requests_page_keyboard(page, has_prev, has_next, search):
    buttons = []
    nav_buttons = []
    if has_prev:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"view_req|{page-1}|{search}"))
    if has_next:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"view_req|{page+1}|{search}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="view_req_search")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notif_back")])
    return InlineKeyboardMarkup(buttons)

def format_requests_list(requests):
    if not requests:
        return "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    lines = []
    for r in requests:
        (req_id, req_type, material, qty, city, info, created_at) = r
        line = (
            f"#{req_id}: [{req_type}] {material}, {qty}, {city}\n"
            f"   –î–æ–ø: {info}\n"
            f"   –î–∞—Ç–∞: {created_at}\n"
        )
        lines.append(line)
    return "\n".join(lines)

# ---------------------------------------------------------------------------
# –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –û –ù–û–í–û–ô –ó–ê–Ø–í–ö–ï
# ---------------------------------------------------------------------------
async def notify_users_about_new_request(context: ContextTypes.DEFAULT_TYPE, creator_user_id: int, req: dict):
    material = req["material"]
    city = req["city"]
    matching_user_ids = get_users_for_notification(material, city)
    notification_text = (
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
        f"–¢–∏–ø: {req['type']}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {material}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {req['quantity']}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–î–æ–ø. –∏–Ω—Ñ–æ: {req['info']}\n"
        "\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞."
    )
    for uid in matching_user_ids:
        if uid == creator_user_id:
            continue
        tg_id = get_telegram_id_by_user_id(uid)
        if tg_id:
            try:
                await context.bot.send_message(
                    chat_id=tg_id,
                    text=notification_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Failed to send notification to user_id={uid} (tg_id={tg_id}): {e}")

# ---------------------------------------------------------------------------
# /start
# ---------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    add_user(user.id, user.username)
    row = get_user_by_telegram_id(user.id)
    if row:
        user_id = row[0]
        init_notification_items_for_user(user_id)
    if update.message:
        await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=build_main_menu(),
            parse_mode='HTML'
        )
    return MAIN_MENU

# ---------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö
# ---------------------------------------------------------------------------
async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    data = query.data
    user = query.from_user
    user_row = get_user_by_telegram_id(user.id)
    if not user_row:
        await query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.", show_alert=True)
        return ConversationHandler.END
    user_id = user_row[0]

    if data == "menu_pro":
        try:
            await query.message.edit_text(
                "üöÄ –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Pro‚Äë–∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                reply_markup=build_main_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data == "menu_notifications":
        try:
            await query.message.edit_text(
                "üîî –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º.\n"
                "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º.",
                reply_markup=build_notifications_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data == "menu_create_request":
        if "request" not in context.user_data:
            context.user_data["request"] = {
                "type": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "material": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "quantity": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                "city": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "info": "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }
        summary = build_request_summary(context.user_data)
        kb = build_request_keyboard(context.user_data)
        try:
            await query.message.edit_text(summary, reply_markup=kb, parse_mode='HTML')
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data == "menu_logout":
        delete_user_by_telegram_id(user.id)
        await query.message.delete()
        await query.answer()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
            parse_mode='HTML'
        )
        return ConversationHandler.END

    elif data == "notif_back_main":
        await query.message.delete()
        await query.answer()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=build_main_menu(),
            parse_mode='HTML'
        )
        return MAIN_MENU

    elif data == "notif_materials":
        items_kb = build_notification_list_keyboard(user_id, "material", page=1)
        try:
            await query.message.edit_text(
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
                reply_markup=items_kb,
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data == "notif_cities":
        items_kb = build_notification_list_keyboard(user_id, "city", page=1)
        try:
            await query.message.edit_text(
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:",
                reply_markup=items_kb,
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data == "notif_view_requests":
        text, has_prev, has_next = await build_requests_page_text("", 1)
        kb = build_requests_page_keyboard(1, has_prev, has_next, "")
        try:
            await query.message.edit_text(text, parse_mode='HTML', reply_markup=kb)
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data.startswith("view_req|"):
        parts = data.split("|")
        if len(parts) == 3:
            try:
                page = int(parts[1])
            except ValueError:
                page = 1
            search = parts[2]
            text, has_prev, has_next = await build_requests_page_text(search, page)
            kb = build_requests_page_keyboard(page, has_prev, has_next, search)
            try:
                await query.message.edit_text(text, parse_mode='HTML', reply_markup=kb)
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            return MAIN_MENU
        else:
            await query.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
            return MAIN_MENU

    elif data == "view_req_search":
        try:
            await query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º:",
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return SEARCH_INPUT

    elif data == "notif_back":
        try:
            await query.message.edit_text(
                "üîî –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º.\n"
                "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º.",
                reply_markup=build_notifications_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data.startswith("req_"):
        if data == "req_set_type_selling":
            context.user_data["request"]["type"] = "–ø—Ä–æ–¥–∞–∂–∞"
            summary = build_request_summary(context.user_data)
            kb = build_request_keyboard(context.user_data)
            try:
                await query.message.edit_text(summary, reply_markup=kb, parse_mode='HTML')
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            return MAIN_MENU

        elif data == "req_set_type_buying":
            context.user_data["request"]["type"] = "–∑–∞–∫—É–ø–∫–∞"
            summary = build_request_summary(context.user_data)
            kb = build_request_keyboard(context.user_data)
            try:
                await query.message.edit_text(summary, reply_markup=kb, parse_mode='HTML')
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            return MAIN_MENU

        elif data == "req_really_confirm":
            req = context.user_data["request"]
            try:
                result = await post_new_order({
                    "type": req["type"],
                    "material": req["material"],
                    "quantity": req["quantity"],
                    "city": req["city"],
                    "info": req["info"]
                })
            except Exception as e:
                logger.error(f"Failed to post new order: {e}")
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", show_alert=True)
                return MAIN_MENU

            await notify_users_about_new_request(context, user_id, req)
            context.user_data["request"] = {
                "type": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "material": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "quantity": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                "city": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "info": "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }
            try:
                await query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", parse_mode='HTML')
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            await query.message.reply_text(
                "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=build_main_menu(),
                parse_mode='HTML'
            )
            return MAIN_MENU

        sub = data.split("_")[1]
        if sub == "back":
            await query.message.delete()
            await query.bot.send_message(
                chat_id=query.message.chat_id,
                text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=build_main_menu(),
                parse_mode='HTML'
            )
            await query.answer()
            return MAIN_MENU

        elif sub == "type":
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üí∞ –Ø –ø—Ä–æ–¥–∞—é", callback_data="req_set_type_selling"),
                    InlineKeyboardButton("üõí –Ø –ø–æ–∫—É–ø–∞—é", callback_data="req_set_type_buying")
                ],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="req_cancel_field")]
            ])
            try:
                await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=kb, parse_mode='HTML')
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            return MAIN_MENU

        elif sub in ["material", "quantity", "city", "info"]:
            context.user_data["awaiting_field"] = sub
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="req_cancel_field")]])
            try:
                await query.message.edit_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{sub}</b>:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç.",
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_text error: {e}")
            await query.answer()
            return REQUEST_INPUT

        elif sub == "confirm":
            req = context.user_data["request"]
            if (req.get("type") == "–Ω–µ —É–∫–∞–∑–∞–Ω" or
                req.get("material") == "–Ω–µ —É–∫–∞–∑–∞–Ω" or
                req.get("quantity") == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" or
                req.get("city") == "–Ω–µ —É–∫–∞–∑–∞–Ω"):
                await query.answer("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç–∏–ø, –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≥–æ—Ä–æ–¥).", show_alert=True)
                return MAIN_MENU
            else:
                summary = build_request_summary(context.user_data)
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="req_really_confirm")],
                    [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="req_no_confirm")]
                ])
                try:
                    await query.message.edit_text(
                        f"{summary}\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏?",
                        reply_markup=kb,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        logger.info("Message not modified, skipping update.")
                    else:
                        logger.error(f"edit_text error: {e}")
                await query.answer()
                return MAIN_MENU

        else:
            await query.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ req_.", show_alert=True)
            return MAIN_MENU

    elif data in ["req_cancel_field", "req_no_confirm"]:
        summary = build_request_summary(context.user_data)
        kb = build_request_keyboard(context.user_data)
        try:
            await query.message.edit_text(summary, reply_markup=kb, parse_mode='HTML')
        except Exception as e:
            if "Message is not modified" in str(e):
                logger.info("Message not modified, skipping update.")
            else:
                logger.error(f"edit_text error: {e}")
        await query.answer()
        return MAIN_MENU

    elif data.startswith("tn|"):
        parts = data.split("|")
        if len(parts) == 3:
            _, filter_id_str, page_str = parts
            filter_id = int(filter_id_str)
            page = int(page_str)
            toggle_notification_item_by_id(user_id, filter_id)
            filter_type = get_filter_type_for_id(user_id, filter_id=filter_id)
            if filter_type:
                new_kb = build_notification_list_keyboard(user_id, filter_type, page)
                try:
                    await query.message.edit_reply_markup(new_kb)
                except Exception as e:
                    if "Message is not modified" in str(e):
                        logger.info("Message not modified, skipping update.")
                    else:
                        logger.error(f"edit_reply_markup error: {e}")
                await query.answer()
                return MAIN_MENU
            else:
                await query.answer("–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return MAIN_MENU
        else:
            await query.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data (tn|).", show_alert=True)
            return MAIN_MENU

    elif data.startswith("ln|"):
        parts = data.split("|")
        if len(parts) == 3:
            _, filter_type, page_str = parts
            page = int(page_str)
            new_kb = build_notification_list_keyboard(user_id, filter_type, page)
            try:
                await query.message.edit_reply_markup(new_kb)
            except Exception as e:
                if "Message is not modified" in str(e):
                    logger.info("Message not modified, skipping update.")
                else:
                    logger.error(f"edit_reply_markup error: {e}")
            await query.answer()
            return MAIN_MENU
        else:
            await query.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data (ln|).", show_alert=True)
            return MAIN_MENU

    else:
        await query.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
        return MAIN_MENU

# ---------------------------------------------------------------------------
# –î–û–ü. –§–£–ù–ö–¶–ò–Ø: –ü–û–õ–£–ß–ò–¢–¨ filter_type –ü–û filter_id
# ---------------------------------------------------------------------------
def get_filter_type_for_id(user_id: int, filter_id: int) -> str:
    from db import get_connection
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT filter_type
        FROM notification_filters
        WHERE id = ? AND user_id = ?
    ''', (filter_id, user_id))
    row = cursor.fetchone()
    conn.close()
    if row:
        return row[0]
    return None

# ---------------------------------------------------------------------------
# –§–û–õ–õ–ë–ï–ö –î–õ–Ø –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ---------------------------------------------------------------------------
async def text_fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()
    if text == "test notifications":
        await update.message.reply_text(
            "üîî –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –ì–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã, –ú–∞—Ç–µ—Ä–∏–∞–ª –ú–µ–¥—å, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 5 —Ç–æ–Ω–Ω.\n"
            "–ù–∞–∂–º–∏—Ç–µ /view_123 –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
            parse_mode='HTML'
        )
        return MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", parse_mode='HTML')
        return MAIN_MENU

# ---------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –¢–ï–ö–°–¢–ê –î–õ–Ø –ó–ê–Ø–í–ö–ò
# ---------------------------------------------------------------------------
async def request_field_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    field = context.user_data.get("awaiting_field")
    if not field:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", parse_mode='HTML')
        return MAIN_MENU
    req = context.user_data.setdefault("request", {})
    if field == "material":
        req["material"] = text
    elif field == "quantity":
        req["quantity"] = text
    elif field == "city":
        req["city"] = text
    elif field == "info":
        req["info"] = text
    context.user_data["awaiting_field"] = None
    summary = build_request_summary(context.user_data)
    kb = build_request_keyboard(context.user_data)
    await update.message.reply_text(summary, reply_markup=kb, parse_mode='HTML')
    return MAIN_MENU

# ---------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –¢–ï–ö–°–¢–ê –î–õ–Ø –ü–û–ò–°–ö–ê –ó–ê–Ø–í–û–ö
# ---------------------------------------------------------------------------
async def search_requests_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    search_query = update.message.text.strip()
    text, has_prev, has_next = await build_requests_page_text(search_query, 1)
    kb = build_requests_page_keyboard(1, has_prev, has_next, search_query)
    await update.message.reply_text(text, reply_markup=kb, parse_mode='HTML')
    return MAIN_MENU

# ---------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# ---------------------------------------------------------------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error('Update "%s" caused error "%s"', update, context.error)

# ---------------------------------------------------------------------------
# ConversationHandler
# ---------------------------------------------------------------------------
main_flow_handler = ConversationHandler(
    entry_points=[CommandHandler('start', cmd_start)],
    states={
        MAIN_MENU: [
            CallbackQueryHandler(main_menu_callback),
            MessageHandler(filters.TEXT & ~filters.COMMAND, text_fallback_handler),
        ],
        REQUEST_INPUT: [
            CallbackQueryHandler(main_menu_callback),
            MessageHandler(filters.TEXT & ~filters.COMMAND, request_field_input),
        ],
        SEARCH_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, search_requests_input)
        ]
    },
    fallbacks=[CommandHandler('cancel', cmd_start)],
    name="main_flow"
)

# ---------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
# ---------------------------------------------------------------------------
from telegram.ext import Application

async def run_bot():
    init_db()
    app = Application.builder().token("YOUR_BOT_TOKEN_HERE").build()
    app.add_handler(main_flow_handler)
    app.add_error_handler(error_handler)
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(run_bot())
