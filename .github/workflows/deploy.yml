name: Deploy to production server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Connect to server and run scripts
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.VDS_IP }}
          username: user1
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/user1/py_projects/${{ vars.FOLDER_AND_SERVICE_NAME }}

            echo "=== Starting Deployment Script ===" 

            # Pull the latest code and capture output
            echo "Running git pull..."
            git_output=$(git pull 2>&1)
            echo "$git_output" > /home/user1/git_pull.log
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
              -d text="Git pull output: $git_output"

            # Activate the virtual environment (adjust the path if needed)
            echo "Activating virtual environment..."
            source /home/user1/py_projects/${{ vars.FOLDER_AND_SERVICE_NAME }}/venv/bin/activate

            # Install dependencies and capture output
            echo "Installing dependencies..."
            pip_output=$(pip install -r requirements.txt 2>&1)
            echo "$pip_output" > /home/user1/pip_install.log
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
              -d text="Dependencies install output: $pip_output"

            # Restart the service and capture status
            echo "Restarting service..."
            sudo systemctl restart ${{ vars.FOLDER_AND_SERVICE_NAME }}.service
            status_output=$(sudo systemctl status ${{ vars.FOLDER_AND_SERVICE_NAME }}.service --no-pager)
            echo "$status_output" > /home/user1/service_status.log
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
              -d text="Service status after restart: $status_output"

            # Further git pull for error check with logging
            { git pull 2>&1 > /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-success.txt || echo "Git pull failed" > /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-error.txt; }

            if [ -s /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-error.txt ]; then
              error_message=$(cat /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-error.txt)
              max_length=4096

              # Send initial error message
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
                -d text="Deployment ${{ vars.FOLDER_AND_SERVICE_NAME }} failed with the following error: $error_message"

              # Send error message in chunks
              while [ -n "$error_message" ]; do
                chunk="${error_message:0:max_length}"
                curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                  -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
                  -d text="$chunk"
                error_message="${error_message:max_length}"
              done
            fi

            if [ -s /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-success.txt ]; then
              sudo systemctl restart ${{ vars.FOLDER_AND_SERVICE_NAME }}.service
              success_message=$(cat /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-success.txt)
              max_length=4096
              while [ -n "$success_message" ]; do
                chunk="${success_message:0:max_length}"
                curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                  -d chat_id=${{ vars.TELEGRAM_CHAT_ID }} \
                  -d text="$chunk"
                success_message="${success_message:max_length}"
              done
            fi

            rm -f /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-success.txt /home/user1/tmp-git-pull-${{ vars.FOLDER_AND_SERVICE_NAME }}-error.txt

            echo "=== Deployment Script Finished ==="
